@Grab(group='com.sun.mail', module='javax.mail', version='1.6.2')

import javax.mail.*
import javax.mail.internet.*

pipeline {
    agent any
    
    stages {
        stage('Send Email') {
            steps {
                script {
                    def mailBody = """
                        Please review the changes and respond with 'APPROVED' or 'REJECTED'.
                    """
                    emailext body: mailBody,
                             subject: 'Code Review Request',
                             to: 'recipient@example.com',
                             replyTo: 'reply@example.com'
                }
            }
        }
        
        stage('Wait for Response') {
            steps {
                script {
                    def responseReceived = false
                    def timeoutReached = false
                    def startTime = System.currentTimeMillis()
                    def timeout = 30 * 1000 // 30 seconds
                    
                    // Loop until a response is received or timeout is reached
                    while (!responseReceived && !timeoutReached) {
                        // Check for responses in your email system or mailbox
                        // You would need to replace this with your own logic to fetch and process email responses
                        // For demonstration purposes, we're simulating checking for responses by sleeping for a short interval
                        sleep 10000 // 10 seconds (adjust as needed)
                        
                        // Assume we received a response (for demonstration purposes)
                        def response = fetchResponseFromMailbox()
                        if (response != null) {
                            responseReceived = true
                            echo "Response received: $response"
                            
                            // Take appropriate action based on the response
                            if (response == "APPROVED") {
                                // Proceed with the next steps in your pipeline
                                echo "Code review approved. Proceeding with deployment."
                            } else if (response == "REJECTED") {
                                // Take corrective action or halt the pipeline
                                error "Code review rejected. Halting the pipeline."
                            } else {
                                echo "Invalid response received: $response"
                            }
                        }
                        
                        // Check if timeout has been reached
                        if (System.currentTimeMillis() - startTime >= timeout) {
                            timeoutReached = true
                        }
                    }
                    
                    if (timeoutReached) {
                        echo "No response received within the specified time frame."
                        // Handle the case where no response is received within the specified timeout
                    }
                }
            }
        }
    }
    
    def fetchResponseFromMailbox() {
    def host = "imap.gmail.com" // Gmail IMAP host
    def username = "raju.thanga@gmail.com" // Your Gmail email address
    def password = "aono hgml varx jpdo" // Your Gmail password
    
    Properties props = new Properties()
    props.setProperty("mail.store.protocol", "imaps")
    props.setProperty("mail.imap.ssl.enable", "true")
    props.setProperty("mail.imap.host", host)
    props.setProperty("mail.imap.port", "993")

    def session = Session.getDefaultInstance(props, null)
    def store = session.getStore("imaps")
    store.connect(host, username, password)

    def inbox = store.getFolder("INBOX")
    inbox.open(Folder.READ_ONLY)

    // Fetch messages received after a certain date (e.g., since the start of the pipeline execution)
    def sinceDate = new Date() // Change this to the start time of the pipeline execution
    def searchQuery = new ReceivedDateTerm(ComparisonTerm.GT, sinceDate)
    def messages = inbox.search(searchQuery)

    // Process each message to extract the response
    for (Message message : messages) {
        def contentType = message.getContentType()
        if (contentType.startsWith("text/plain") || contentType.startsWith("multipart")) {
            def content = message.getContent()
            if (content instanceof String) {
                // Extract response from the email body
                def response = content.trim()
                if (response == "APPROVED" || response == "REJECTED") {
                    // Mark the message as read to avoid processing it again
                    message.setFlag(Flags.Flag.SEEN, true)
                    return response
                }
            }
        }
    }

    inbox.close(false)
    store.close()

    return null // No response found
}
}
