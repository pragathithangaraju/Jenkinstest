// pipeline {
//     agent any
    
//     stages {
//         stage('Send Email') {
//             steps {
//                 script {
//                     def mailBody = """
//                         <html>
//                         <body>
//                             <p>Please review the changes and click the link below to approve or reject:</p>
//                             <p><a href="${BUILD_URL}input">Review Changes</a></p>
//                         </body>
//                         </html>
//                     """
//                     emailext mimeType: 'text/html',
//                              body: mailBody,
//                              subject: 'Code Review Request',
//                              to: 'kthangaraju@yahoo.com',
//                              replyTo: 'jenkins@gmail.com' // Your Gmail address
//                 }
//             }
//         }
        
//         stage('Wait for Approval') {
//             steps {
//                 input message: 'Please review the changes and approve or reject:', submitter: 'admin'
//             }
//         }
        
//         stage('Proceed with Deployment') {
//             steps {
//                 echo "Hi"
//             }
//         }
//     }
// }


pipeline {
    agent any
    
    environment {
        MAIL_SERVER = 'pop.example.com'
        MAIL_USERNAME = credentials('raju.thanga')
        MAIL_PASSWORD = credentials('aono hgml varx jpdo')
        SENDER_EMAIL = 'raju.thanga@gmail.com'
    }
    
    stages {
        stage('Send Approval Request') {
            steps {
                script {
                    try {
                        emailext (
                            to: 'kthangaraju@yahoo.com',
                            subject: "Approval Request",
                            body: "Please approve or reject this request by replying with 'Approved' or 'Rejected'.",
                            from: env.SENDER_EMAIL
                        )
                        println "Approval request email sent successfully."
                    } catch (Exception e) {
                        println "Failed to send approval request email: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error(e.message)
                    }
                }
            }
        }
        
        stage('Access Mail') {
            steps {
                script {
                    try {
                        def properties = new Properties()
                        properties.setProperty("mail.pop3.host", env.MAIL_SERVER)
                        properties.setProperty("mail.pop3.port", "995")
                        properties.setProperty("mail.pop3.ssl.enable", "true")

                        def session = Session.getDefaultInstance(properties)
                        def store = session.getStore("pop3s")

                        store.connect(env.MAIL_SERVER, env.MAIL_USERNAME, env.MAIL_PASSWORD)

                        def inbox = store.getFolder("INBOX")
                        inbox.open(Folder.READ_WRITE)

                        def messages = inbox.getMessages()

                        for (int i = 0; i < messages.length; i++) {
                            def message = messages[i]
                            if (message.from[0].toString() == env.SENDER_EMAIL) {
                                def response = message.content.toString().trim()
                                if (response.equalsIgnoreCase("Approved")) {
                                    println "Request approved."
                                } else if (response.equalsIgnoreCase("Rejected")) {
                                    println "Request rejected."
                                } else {
                                    println "Invalid response: $response"
                                }
                                // Optionally, you can mark the message as read or move it to another folder here
                                // message.setFlag(Flags.Flag.SEEN, true)
                                // inbox.copyMessages(new Message[] {message}, store.getFolder("Processed"))
                                // message.setFlag(Flags.Flag.DELETED, true)
                            }
                        }

                        inbox.close(true)
                        store.close()
                    } catch (Exception e) {
                        println "Failed to access mail: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error(e.message)
                    }
                }
            }
        }
    }
}
